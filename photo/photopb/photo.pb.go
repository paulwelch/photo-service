/*
 * Copyright 2018 Paul Welch
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: photo.proto

/*
Package photopb is a generated protocol buffer package.

It is generated from these files:
	photo.proto

It has these top-level messages:
	Empty
	Photo
	PhotoList
	NewRequest
	GetRequest
	ListRequest
	UpdateRequest
	DeleteRequest
*/
package photopb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Photo struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Created int64  `protobuf:"varint,998,opt,name=created" json:"created,omitempty"`
	Updated int64  `protobuf:"varint,999,opt,name=updated" json:"updated,omitempty"`
}

func (m *Photo) Reset()                    { *m = Photo{} }
func (m *Photo) String() string            { return proto.CompactTextString(m) }
func (*Photo) ProtoMessage()               {}
func (*Photo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Photo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Photo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Photo) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Photo) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type PhotoList struct {
	Photos []*Photo `protobuf:"bytes,1,rep,name=photos" json:"photos,omitempty"`
	Count  int32    `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *PhotoList) Reset()                    { *m = PhotoList{} }
func (m *PhotoList) String() string            { return proto.CompactTextString(m) }
func (*PhotoList) ProtoMessage()               {}
func (*PhotoList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PhotoList) GetPhotos() []*Photo {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *PhotoList) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type NewRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *NewRequest) Reset()                    { *m = NewRequest{} }
func (m *NewRequest) String() string            { return proto.CompactTextString(m) }
func (*NewRequest) ProtoMessage()               {}
func (*NewRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NewRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListRequest struct {
	Page  int64 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type UpdateRequest struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "photopb.Empty")
	proto.RegisterType((*Photo)(nil), "photopb.Photo")
	proto.RegisterType((*PhotoList)(nil), "photopb.PhotoList")
	proto.RegisterType((*NewRequest)(nil), "photopb.NewRequest")
	proto.RegisterType((*GetRequest)(nil), "photopb.GetRequest")
	proto.RegisterType((*ListRequest)(nil), "photopb.ListRequest")
	proto.RegisterType((*UpdateRequest)(nil), "photopb.UpdateRequest")
	proto.RegisterType((*DeleteRequest)(nil), "photopb.DeleteRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PhotoService service

type PhotoServiceClient interface {
	New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*Photo, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Photo, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PhotoList, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Photo, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error)
}

type photoServiceClient struct {
	cc *grpc.ClientConn
}

func NewPhotoServiceClient(cc *grpc.ClientConn) PhotoServiceClient {
	return &photoServiceClient{cc}
}

func (c *photoServiceClient) New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := grpc.Invoke(ctx, "/photopb.PhotoService/New", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := grpc.Invoke(ctx, "/photopb.PhotoService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PhotoList, error) {
	out := new(PhotoList)
	err := grpc.Invoke(ctx, "/photopb.PhotoService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := grpc.Invoke(ctx, "/photopb.PhotoService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/photopb.PhotoService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PhotoService service

type PhotoServiceServer interface {
	New(context.Context, *NewRequest) (*Photo, error)
	Get(context.Context, *GetRequest) (*Photo, error)
	List(context.Context, *ListRequest) (*PhotoList, error)
	Update(context.Context, *UpdateRequest) (*Photo, error)
	Delete(context.Context, *DeleteRequest) (*Empty, error)
}

func RegisterPhotoServiceServer(s *grpc.Server, srv PhotoServiceServer) {
	s.RegisterService(&_PhotoService_serviceDesc, srv)
}

func _PhotoService_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photopb.PhotoService/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).New(ctx, req.(*NewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photopb.PhotoService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photopb.PhotoService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photopb.PhotoService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photopb.PhotoService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PhotoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "photopb.PhotoService",
	HandlerType: (*PhotoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _PhotoService_New_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PhotoService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PhotoService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PhotoService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PhotoService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "photo.proto",
}

func init() { proto.RegisterFile("photo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xdd, 0x4e, 0xf2, 0x40,
	0x10, 0xa5, 0x2d, 0x6d, 0xc3, 0xf0, 0xc1, 0xc5, 0x7e, 0xc4, 0x54, 0x62, 0x62, 0xb3, 0x17, 0x86,
	0x0b, 0xc3, 0x05, 0x5c, 0xf8, 0x02, 0x1a, 0x62, 0x62, 0x88, 0x59, 0xe3, 0x03, 0x14, 0x3a, 0xd1,
	0x4d, 0x80, 0xae, 0xb0, 0x48, 0x7c, 0x01, 0x1f, 0x55, 0x5f, 0xc3, 0xec, 0x6c, 0xe9, 0x0f, 0x29,
	0x77, 0x3b, 0x7b, 0xce, 0xcc, 0x9c, 0x73, 0x76, 0xa1, 0xab, 0xde, 0x33, 0x9d, 0x8d, 0xd5, 0x36,
	0xd3, 0x19, 0x0b, 0xa9, 0x50, 0x0b, 0x1e, 0x82, 0xff, 0xb0, 0x56, 0xfa, 0x8b, 0x27, 0xe0, 0x3f,
	0x9b, 0x3b, 0xd6, 0x07, 0x57, 0xa6, 0x91, 0x13, 0x3b, 0xa3, 0x8e, 0x70, 0x65, 0xca, 0x18, 0xb4,
	0x37, 0xc9, 0x1a, 0x23, 0x97, 0x6e, 0xe8, 0xcc, 0x2e, 0x21, 0x5c, 0x6e, 0x31, 0xd1, 0x98, 0x46,
	0x3f, 0x61, 0xec, 0x8c, 0x3c, 0x71, 0xac, 0x0d, 0xb4, 0x57, 0x29, 0x41, 0xbf, 0x39, 0x94, 0xd7,
	0xfc, 0x11, 0x3a, 0xb4, 0xe2, 0x49, 0xee, 0x34, 0xbb, 0x81, 0x80, 0x34, 0xec, 0x22, 0x27, 0xf6,
	0x46, 0xdd, 0x49, 0x7f, 0x9c, 0x4b, 0x1a, 0x13, 0x47, 0xe4, 0x28, 0x1b, 0x80, 0xbf, 0xcc, 0xf6,
	0x1b, 0x4d, 0xfb, 0x7d, 0x61, 0x0b, 0x1e, 0x03, 0xcc, 0xf1, 0x20, 0xf0, 0x63, 0x8f, 0x3b, 0x5d,
	0x48, 0x74, 0x4a, 0x89, 0xfc, 0x0a, 0x60, 0x86, 0xfa, 0xc8, 0x38, 0x31, 0xc5, 0xef, 0xa0, 0x6b,
	0x54, 0x54, 0x06, 0xa8, 0xe4, 0xcd, 0x0e, 0xf0, 0x04, 0x9d, 0xcd, 0xe2, 0x95, 0x5c, 0x4b, 0xbb,
	0xd8, 0x13, 0xb6, 0xe0, 0x53, 0xe8, 0xbd, 0x92, 0x9d, 0x33, 0x93, 0x9b, 0xe2, 0xe2, 0xd7, 0xd0,
	0xbb, 0xc7, 0x15, 0x9e, 0x6d, 0x9a, 0x7c, 0xbb, 0xf0, 0x8f, 0x6c, 0xbf, 0xe0, 0xf6, 0x53, 0x2e,
	0x91, 0xdd, 0x82, 0x37, 0xc7, 0x03, 0xfb, 0x5f, 0x84, 0x52, 0xba, 0x1d, 0x9e, 0x24, 0xc5, 0x5b,
	0x86, 0x3d, 0x43, 0x5d, 0x61, 0x97, 0xce, 0x1b, 0xd8, 0x13, 0x68, 0xd3, 0x0b, 0x0c, 0x0a, 0xa4,
	0x12, 0xc5, 0x90, 0xd5, 0xf9, 0x06, 0xa2, 0x9e, 0xc0, 0xda, 0x66, 0x17, 0x05, 0x5e, 0xcb, 0xa1,
	0x71, 0x4f, 0x60, 0x5d, 0x57, 0x7a, 0x6a, 0x31, 0x54, 0x7a, 0xec, 0x1f, 0x6c, 0x2d, 0x02, 0xfa,
	0x9e, 0xd3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x6f, 0x8b, 0xe3, 0xad, 0x02, 0x00, 0x00,
}
